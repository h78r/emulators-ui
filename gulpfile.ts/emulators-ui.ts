import * as fs from "fs";

import { src, dest, series } from "gulp";
import { error } from "./log";

import del from "del";

import sourcemaps from "gulp-sourcemaps";
import terser from "gulp-terser";
import size from "gulp-size";
import browserify from "browserify";
import buffer from "vinyl-buffer";
import source from "vinyl-source-stream";

import getRepoInfo from "git-repo-info";
// eslint-disable-next-line
const MD5 = require("md5.js");
// eslint-disable-next-line
const pjson = require("../package.json");

// eslint-disable-next-line
const tsify = require("tsify");

function clean() {
    return del(["dist/emulators*"], { force: true });
}

function copyCss() {
    return src("src/emulators-ui.css")
        .pipe(dest("dist"));
}

function copyAssets() {
    return src("src/emulators-ui-loader.png")
        .pipe(dest("dist"));
}

function js() {
    return browserify({
        debug: true,
        entries: ["src/emulators-ui.ts"],
        cache: {},
        packageCache: {},
    })
        .plugin(tsify, {
            "target": "esnext",
        })
        .transform("babelify", {
            presets: [["@babel/preset-env", {
                "useBuiltIns": "usage",
                "corejs": 3,
            }]],
            extensions: [".ts"],
        })
        .bundle()
        .pipe(source("emulators-ui.js"))
        .pipe(buffer())
        .pipe(sourcemaps.init({ loadMaps: true }))
        .pipe(terser())
        .pipe(sourcemaps.write("./"))
        .pipe(size({ showFiles: true, showTotal: false }))
        .pipe(dest("dist"));
}


async function generateBuildInfo() {
    const info = getRepoInfo();
    if (info.sha === null) {
        error("Git repo not found, using '<not-a-git-repo>' as sha");
        info.sha = "<not-a-git-repo>";
    }
    const seed = Date.now();
    const md5Version = new MD5().update(pjson.version)
        .update(info.sha);

    const hex = md5Version
        .update(seed + "")
        .digest("hex");

    fs.writeFileSync("src/build.ts", `
// Autogenerated
// -------------
// gulpfile.ts/wasm.ts --> generateBuildInfo

export const Build = {
    short: "${pjson.version}",
    version: "${pjson.version} (${hex})",
    buildSeed: ${seed},
};
`);
}

export const emulatorsUi = series(clean, generateBuildInfo, js, copyCss, copyAssets);
